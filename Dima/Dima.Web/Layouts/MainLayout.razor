@inherits LayoutComponentBase

<MudThemeProvider 
    @ref="_mudThemeProvider"
    @bind-IsDarkMode="_isDarkMode" 
    Theme="Configuration.Theme"/>
<MudSnackbarProvider/>
<MudDialogProvider/>
<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar>
                <MudIconButton 
                    Icon="@Icons.Material.Filled.Menu"
                    Color="Color.Inherit"
                    Edge="Edge.Start"
                    OnClick="ToggleDrawer"
                    ></MudIconButton>
                Dima
                <MudSpacer/>
                <MudButton Href="/lancamentos/novo" Variant="Variant.Text" StartIcon="@Icons.TwoTone.Add">
                    NOVO LANÇAMENTO
                </MudButton>
                <MudText Typo="Typo.caption">
                    @context.User.Identity?.Name;
                </MudText>
                <MudSwitch 
                    Color="Color.Inherit"
                    @bind-Value="_isDarkMode"
                    T="bool"
                    ThumbIcon="@Icons.TwoTone.Lightbulb"
                    Class="ma-4" 
                    />
            </MudAppBar>
            <MudDrawer @bind-Open="@_isDrawerOpen">
                <NavMenu></NavMenu>
            </MudDrawer>
            <MudMainContent>
                <MudContainer  Class="mt-04">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <LoginRedirect/>
    </NotAuthorized>
</AuthorizeView>

@code {

    private bool _isDarkMode = true;
    private bool _isDrawerOpen = true;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ToggleDrawer() => _isDrawerOpen = !_isDrawerOpen;

}